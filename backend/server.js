/**
 * Backend Server
 * Auto-generated by fix-backend-routes.js
 */

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const config = require('./config');

// Initialize Express app
const app = express();
const PORT = process.env.PORT || config.api.port || 5000;

// Middleware
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// MongoDB connection string
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://huzaifa:huzaifa56567@cluster0.zvcyftu.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';

// Connect to MongoDB
mongoose.connect(MONGODB_URI)
  .then(() => {
    console.log('MongoDB connected successfully');
    
    // Debug: List all collections in the database
    mongoose.connection.db.listCollections().toArray((err, collections) => {
      if (err) {
        console.error('Error listing collections:', err);
      } else {
        console.log('Available collections:');
        collections.forEach(collection => {
          console.log(' - ' + collection.name);
        });
      }
    });
  })
  .catch(err => {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  });

// Import routes
const userRoutes = require('./routes/users');
const marketRoutes = require('./routes/markets');

// API routes
app.use('/api/users', userRoutes);
app.use('/api/Markets', marketRoutes);

// Status endpoint
app.get('/api/status', (req, res) => {
  res.json({
    status: 'ok',
    database_connected: mongoose.connection.readyState === 1,
    version: '1.0.0'
  });
});

// MongoDB connection test endpoint
app.get('/api/db-test', async (req, res) => {
  try {
    // Check database connection
    if (mongoose.connection.readyState !== 1) {
      return res.status(500).json({ success: false, message: 'Database not connected' });
    }
    
    // List all collections
    const collections = await mongoose.connection.db.listCollections().toArray();
    
    return res.json({
      success: true,
      message: 'Successfully connected to MongoDB Atlas',
      collections: collections.map(col => col.name),
      database: mongoose.connection.db.databaseName
    });
  } catch (error) {
    console.error('DB test error:', error);
    return res.status(500).json({ success: false, message: error.message });
  }
});

// Start server
app.listen(PORT, () => {
  console.log('Backend server running on port ' + PORT);
  console.log('Using database: ' + config.database.name);
  console.log('Using users collection: ' + config.database.collections.users);
});
