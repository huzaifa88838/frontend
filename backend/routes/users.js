/**
 * User API Routes
 * Auto-generated by fix-backend-routes.js
 */

const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const config = require('../config');

// Get the users collection
const getUsersCollection = () => {
  if (!mongoose.connection || mongoose.connection.readyState !== 1) {
    throw new Error('MongoDB connection not established');
  }
  return mongoose.connection.db.collection(config.database.collections.users);
};

/**
 * @route GET /api/users
 * @desc Get all users
 * @access Admin only
 */
router.get('/', async (req, res) => {
  try {
    const usersCollection = getUsersCollection();
    const users = await usersCollection.find({}).toArray();
    
    // Remove sensitive data like passwords
    const safeUsers = users.map(user => {
      const { password, password_hash, ...safeUser } = user;
      return safeUser;
    });
    
    res.json({ success: true, users: safeUsers });
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});

/**
 * @route POST /api/users/create
 * @desc Create a new user
 * @access Admin only
 */
router.post('/create', async (req, res) => {
  try {
    const { username, password, role, email, full_name, initial_balance = 0 } = req.body;
    
    // Validate required fields
    if (!username || !password) {
      return res.status(400).json({ 
        success: false, 
        message: 'Username and password are required' 
      });
    }
    
    const usersCollection = getUsersCollection();
    
    // Check if username already exists
    const existingUser = await usersCollection.findOne({ 
      username: { $regex: new RegExp('^' + username + '$', 'i') } 
    });
    
    if (existingUser) {
      return res.status(400).json({ 
        success: false, 
        message: 'Username already exists' 
      });
    }
    
    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    
    // Create new user
    const newUser = {
      username,
      password: hashedPassword,
      role: role || 'User',
      email: email || username + '@example.com',
      full_name: full_name || username,
      wallet_balance: parseFloat(initial_balance) || 0,
      status: 'Active',
      created_at: new Date()
    };
    
    const result = await usersCollection.insertOne(newUser);
    
    // Return success without sensitive data
    const { password: pwd, ...safeUser } = newUser;
    safeUser._id = result.insertedId;
    
    res.json({ 
      success: true, 
      message: 'User created successfully', 
      user: safeUser 
    });
  } catch (error) {
    console.error('Error creating user:', error);
    res.status(500).json({ 
      success: false, 
      message: 'An error occurred while creating the user. Please try again.' 
    });
  }
});

/**
 * @route GET /api/users/:id
 * @desc Get user by ID
 * @access Admin or own user
 */
router.get('/:id', async (req, res) => {
  try {
    const userId = req.params.id;
    
    // Validate MongoDB ObjectId
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ 
        success: false, 
        message: 'Invalid user ID' 
      });
    }
    
    const usersCollection = getUsersCollection();
    const user = await usersCollection.findOne({ 
      _id: new mongoose.Types.ObjectId(userId) 
    });
    
    if (!user) {
      return res.status(404).json({ 
        success: false, 
        message: 'User not found' 
      });
    }
    
    // Remove sensitive data
    const { password, password_hash, ...safeUser } = user;
    
    res.json({ success: true, user: safeUser });
  } catch (error) {
    console.error('Error fetching user:', error);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});

/**
 * @route PUT /api/users/:id
 * @desc Update user
 * @access Admin or own user
 */
router.put('/:id', async (req, res) => {
  try {
    const userId = req.params.id;
    const updateData = req.body;
    
    // Validate MongoDB ObjectId
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ 
        success: false, 
        message: 'Invalid user ID' 
      });
    }
    
    // Don't allow updating certain fields directly
    const { _id, created_at, ...safeUpdateData } = updateData;
    
    // If password is being updated, hash it
    if (safeUpdateData.password) {
      const salt = await bcrypt.genSalt(10);
      safeUpdateData.password = await bcrypt.hash(safeUpdateData.password, salt);
    }
    
    const usersCollection = getUsersCollection();
    const result = await usersCollection.updateOne(
      { _id: new mongoose.Types.ObjectId(userId) },
      { $set: { ...safeUpdateData, last_updated: new Date() } }
    );
    
    if (result.matchedCount === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'User not found' 
      });
    }
    
    res.json({ 
      success: true, 
      message: 'User updated successfully' 
    });
  } catch (error) {
    console.error('Error updating user:', error);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});

/**
 * @route DELETE /api/users/:id
 * @desc Delete user
 * @access Admin only
 */
router.delete('/:id', async (req, res) => {
  try {
    const userId = req.params.id;
    
    // Validate MongoDB ObjectId
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ 
        success: false, 
        message: 'Invalid user ID' 
      });
    }
    
    const usersCollection = getUsersCollection();
    const result = await usersCollection.deleteOne({ 
      _id: new mongoose.Types.ObjectId(userId) 
    });
    
    if (result.deletedCount === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'User not found' 
      });
    }
    
    res.json({ 
      success: true, 
      message: 'User deleted successfully' 
    });
  } catch (error) {
    console.error('Error deleting user:', error);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});

module.exports = router;
