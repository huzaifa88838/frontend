const signalrMixin = {
    data: function () {
        return {
            wsc: null,
            sToken: null,
            signalRFlags: {
                status: signalR.HubConnectionState.Disconnected,
                orders: false,
                commentry: false,
                prices: false
            }
        }
    },
    created: function () {
        
    },
    computed: {
        isSignalREnabled: function () {
            return this.signalRFlags.orders ||
                this.signalRFlags.commentry ||
                this.signalRFlags.prices;
        },
        isSignalRConnected: function () {
            return this.wsc !== null &&
                this.signalRFlags.status === signalR.HubConnectionState.Connected;
        }
    },
    methods: {
        Connect: function () {
            const self = this;

            if (self.isSignalREnabled) {

                self.wsc = new signalR.HubConnectionBuilder()
                    .withUrl(SsocketUrl, {
                        accessTokenFactory: () => self.AccessTokenProvider()
                    })
                    .withAutomaticReconnect({
                        nextRetryDelayInMilliseconds: retryContext => {
                            let maxTimeToAttemptingToReconnect = 1000 * 60 * 60;
                            if (retryContext.elapsedMilliseconds < maxTimeToAttemptingToReconnect) {
                                if (retryContext.previousRetryCount === 0) {
                                    return 0;
                                } else if (retryContext.previousRetryCount === 1) {
                                    return 2000;
                                } else if (retryContext.previousRetryCount < 10) {
                                    return 5000;
                                } else {
                                    return 10000;
                                }
                            } else {
                                return null;
                            }
                        }
                    })
                    .configureLogging(signalR.LogLevel.Error)
                    .build();

                this.wsc.onclose(function () {
                    self.signalRFlags.status = self.wsc.state;
                });

                this.wsc.onreconnecting(function () {
                    self.signalRFlags.status = self.wsc.state;
                });

                this.wsc.onreconnected(function () {
                    self.signalRFlags.status = self.wsc.state;
                    self.SubscribeEvent();
                });

                if (self.signalRFlags.prices) {
                    this.wsc.on("ReceivePrices", function (marketData) {
                        if (marketData == null || marketData == undefined) {
                            return;
                        }

                        self.RenderSignalRPrices(marketData);
                    });

                    this.wsc.on("RemoveMarket", function (id) {
                        self.DeleteMarket(id);
                    });
                }

                if (self.signalRFlags.orders) {
                    this.wsc.on("ReceiveOrder", function (order) {
                        self.RenderOrder(order);
                    });

                    this.wsc.on("ReceivePosition", function (position) {
                        self.RenderAllPositions(position);
                    });
                }

                if (self.signalRFlags.commentry) {
                    this.wsc.on("ReceiveCommentry", function (Commentry) {
                        self.RenderCommentry(Commentry);
                    });

                    this.wsc.on("ClearCommentry", function (Commentry) {
                        self.ClearCommentry(Commentry);
                    });
                }

                this.StartSignalR();
            } else {
                self.signalRFlags.status = signalR.HubConnectionState.Connected;
            }
        },
        AccessTokenProvider: function () {
            return this.sToken;
        },
        StartSignalR: function () {
            if (this.wsc.state !== signalR.HubConnectionState.Disconnected) {
                return;
            }

            let self = this;

            this.wsc.start()
                .then(function () {
                    self.signalRFlags.status = self.wsc.state;

                    self.SubscribeEvent();
                })
                .catch(function (err) {
                    setTimeout(() => self.StartSignalR(), 3000);
                });
        },
        SubscribeEvent: function () {
            const self = this;

            if (self.isSignalRConnected && self.signalRFlags.orders) {
                this.wsc.invoke(
                    "SubscribeOrders",
                    { eventId: self.activeEventId, marketId: self.activeMarketId, timeCode: self.timeCode });
            }
        },
    }
}
// const svc_prefix = "/api/";

const noSleep = new NoSleep();

Vue.component('runner-aggregate', {
    props: ['name', 'back', 'lay', 'marketid'],
    template: `
        <div class="runner-runner">
            <h3 class="runner-name">
                <div class="runner-info">
                    <span class="clippable runner-display-name">
                        <h4 class="clippable-spacer">{{ name }}</h4>
                    </span>
                </div>
            </h3>
            <a class="price-price price-back">
                <span class="price-odd"></span>
                <span class="price-amount"></span>
            </a>
            <a class="price-price price-back">
                <span class="price-odd"></span>
                <span class="price-amount"></span>
            </a>
            <a class="price-price price-back mb-show" id="agg-back" v-on:click="$emit('betslip', 'B')">
                <span class="price-odd">{{ back }}</span>
            </a>
            <a class="price-price price-lay ml-4 mb-show" id="agg-lay" v-on:click="$emit('betslip', 'L')">
                <span class="price-odd">{{ lay }}</span>
            </a>
            <a class="price-price price-lay">
                <span class="price-odd"></span>
                <span class="price-amount"></span>
            </a>
            <a class="price-price price-lay mr-4">
                <span class="price-odd"></span>
                <span class="price-amount"></span>
            </a>
        </div>
    `
});

let MarketVM;

function MarketFactory() {
    if ($("#MarketView").length > 0) {
        MarketVM = new Vue({
            el: "#MarketView",
            mixins: [signalrMixin],
            data: {
                IsLoaded: false,

                runnerUnavailable: ['suspended', 'ball running', 'removed'],

                Catalog: {
                    marketName: 'Loading...',
                    runners: []
                },
                WinnersCount: 0,

                LoadingSubMarkets: false,
                MarketPL: [],
                subMarketIds: [],
                soccerscore: [],
                scores: null,
                subMarkets: [],
                
                aggregateRun: {
                    marketId: '',
                    runnerName: '',
                    selectionId: 0,
                    back: '',
                    lay: ''
                },

                IsAggregateOrder: false,

                BookIntervalId: '',
                OrderIntervalId: '',

                score: { team1: null, commentry: null },
                scoreLines: [],
                IsVoice: false,

                SelectMarketName: '',
                SelectFancyPos: [],

                Order: {
                    render: false,
                    working: false,
                    price: 1.01,
                    size: 0,
                    side: 'B',
                    selectionId: 0,
                    isLine: false,
                    isFixOdds: false
                },

                OrderPrice: '1.01',

                OldPrice: '1.01',

                Matched: [],
                UnMatched: [],

                displayOn: false,

                backColor: '227,248,255',
                layColor: '255,205,204',
                plusFlash: '0,178,255',
                minusFlash: '255,122,127',

                SRConnected: false,

                IsPageVisible: true,

                currentDateTime: '',
                fromNow: 'starting soon',
                fancySize: 0,

                bookmakerMarketName: "Bookmaker",

                MarketTypeFigure: "FIGURE",
                MarketTypeOddFigure: "ODD_FIGURE",
                MarketTypeFancy2: "LOCAL_FANCY",
                BetTypeFancy: "LINE",
                StarFancy: "StarFancy",
                MarketTypePlace: "PLACE",
                MarketTypeOtherPlace: "OTHER_PLACE",
                MarketTypeEachWay: "EACH_WAY",
                RaceId: 7,
                GreyhoundId: 4339,

                newMarketIds: [],
                removedMarketIds: [],
                renderedMarketIds: [],
                isRenderedBusy: false,

                activeEventId: null,
                activeMarketId: null,
                timeCode: null,

                trackOrderAttempts: 0,
                isUserHubConnected: false
            },
            created: function () {
                const self = this;

                self.isUserHubConnected = typeof genSck == 'number' && genSck === 1;

                document.getElementById("loadedmarkettoshow").classList.remove("d-none");
                if (marketId !== undefined && marketId !== '') {
                    this.FetchCatalog(marketId);
                    this.aggregateRun.runnerName = "";
                    this.aggregateRun.marketId = marketId;

                    self.activeMarketId = marketId;
                }

                self.signalRFlags.orders = SsocketEnable === 1;
                self.signalRFlags.prices = CatalogSignalR === 1;
                self.signalRFlags.commentry = CommentrySignalR === 1;

                if (eventId !== undefined && eventId !== null) {
                    this.sToken = token;
                    this.activeEventId = eventId;
                    this.timeCode = timeCode;

                    this.Connect();
                }

                self.CatalogIntervalId = setInterval(this.RerenderSubMarkets, 1000);

                let visibilityChange;
                if (typeof document.hidden !== "undefined") {
                    hidden = "hidden";
                    visibilityChange = "visibilitychange";
                } else if (typeof document.msHidden !== "undefined") {
                    hidden = "msHidden";
                    visibilityChange = "msvisibilitychange";
                } else if (typeof document.webkitHidden !== "undefined") {
                    hidden = "webkitHidden";
                    visibilityChange = "webkitvisibilitychange";
                }
                document.addEventListener(visibilityChange, this.handleVisibilityChange, false);
            },
            computed: {
                isRenderTopMarket: function () {
                    if (this.Catalog.marketName.toLowerCase() === "match odds"
                        && this.Catalog.marketId.startsWith('9.')) {
                        return false;
                    } else {
                        return true;
                    }
                },
                FirstTabName: function () {
                    if (this.Catalog.eventTypeId === 7) {
                        return "WIN";
                    } else {
                        return "ALL";
                    }
                },
                sport_icon: function () {
                    return this.Catalog?.sport?.image ? "/img/v2/" + this.Catalog.sport.image : null;
                },
                prettyDate: function () {
                    if (this.Catalog.marketStartTimeUtc === '' || this.Catalog.marketStartTimeUtc === "null") {
                        return '';
                    }
                    return moment(this.Catalog.marketStartTimeUtc).format('MMM D h:mm a');
                },
                SubMarketIds: function () {
                    return _.map(this.subMarkets, function (catalog) { return catalog.marketId; });
                },
                CurrentMarketIdsHash: function () {
                    var ids = _.map(this.subMarkets, function (catalog) { return catalog.marketId; });
                    ids = _.sortBy(ids, function (id) { return id; });
                    return ids.join(',');
                },
                HasFancyChild: function () {
                    var m = _.find(this.subMarkets, function (item) {
                        return item.bettingType === "LINE"
                            && item.marketType !== "LOCAL_FANCY";
                    });
                    return m !== undefined;
                },
                HasNonFancyChild: function () {
                    var m = _.find(this.subMarkets, function (item) {
                        return item.bettingType !== "LINE";
                    });
                    return m !== undefined;
                },
                HasLocalFancy: function () {
                    var m = _.find(this.subMarkets, function (item) {
                        return item.marketType === "LOCAL_FANCY";
                    });
                    return m !== undefined;
                },
                HasFigureMarket: function () {
                    var m = _.find(this.subMarkets, function (item) {
                        return item.marketType === "FIGURE";
                    });
                    return m !== undefined;
                },
                HasBookmakerMarket: function () {
                    var m = _.find(this.subMarkets, function (item) {
                        return item.marketName == this.bookmakerMarketName;
                    });
                    return m !== undefined;
                },
                RunnersAggregate: function () {
                    return _.filter(this.Catalog.runners, function (item) {
                        return item.selected;
                    });
                },
                IsFixedOdds: function () {
                    return this.Order.isFixOdds;
                    /*return this.Order.selectionId === 0
                        || this.Order.isLine
                        || this.IsLocalOdds;*/
                },
                IsLocalOdds: function () {
                    return this.Catalog.origin == 'BETPRO'
                        && !this.Catalog.isFancy;
                },
                IsSoccer: function () {
                    return this.Catalog.eventTypeId == 1;
                },
                IsTennis: function () {
                    return this.Catalog.eventTypeId == 2;
                },
                BookmakerMarkets: function () {
                    var self = this;
                    return _.filter(this.subMarkets, function (item) {
                        if (item.marketName == null) return false;
                        return item.marketName === self.bookmakerMarketName || item.marketName.toLowerCase().includes("bookmaker") || item.marketName === "BOOKMAKER";
                    });
                },
                FancyMarkets: function () {
                    var self = this;
                    return _.filter(this.subMarkets, function (item) {
                        return item.marketType !== self.MarketTypeFancy2 && item.bettingType === self.BetTypeFancy;
                    });
                },
                Fancy2Markets: function () {
                    var self = this;
                    return _.filter(this.subMarkets, function (item) {
                        return item.marketType === self.MarketTypeFancy2;
                    });
                },
                FigureMarkets: function () {
                    var self = this;
                    return _.filter(this.subMarkets, function (item) {
                        return item.marketType === self.MarketTypeFigure;
                    });
                },
                OddFigureMarkets: function () {
                    var self = this;
                    var unsorted = _.filter(this.subMarkets, function (item) {
                        return item.marketType === self.MarketTypeOddFigure;
                    });

                    return _.sortBy(unsorted, 'sortPriority');
                },
                TossMarkets: function () {
                    var self = this;
                    return _.filter(this.subMarkets, function (item) {
                        return item.marketType === "TOSS";
                    });
                },
                OtherRaceMarkets: function () {
                    var self = this;
                    return _.filter(this.subMarkets, function (item) {
                        return item.eventTypeId === self.RaceId
                            || item.eventTypeId === self.GreyhoundId;
                    });
                },
                OtherMarkets: function () {
                    var self = this;
                    return _.filter(this.subMarkets, function (item) {
                        if (item.marketName == null) return false;
                        if (item.eventTypeId == self.RaceId
                            || item.eventTypeId == self.GreyhoundId) return false;

                        return item.marketType !== self.MarketTypeFigure
                            && item.marketType !== self.MarketTypeOddFigure
                            && item.marketType !== "TOSS"
                            && item.bettingType !== self.BetTypeFancy
                            && item.marketName !== self.bookmakerMarketName
                            && item.marketType !== self.StarFancy
                            && !item.marketName.toLowerCase().includes("bookmaker");
                    });
                }
            },
            watch: {
                score: function (newVal, oldVal) {
                    if (newVal?.commentry !== oldVal?.commentry) {
                        this.PlayCommentry(newVal.commentry);
                    }
                },
                displayOn: function (value) {

                },
                SubMarketIds: function (newValue, oldValue) {

                    let self = this;
                    let removed = _.difference(oldValue, newValue);
                    if (removed.length > 0) {
                        _.each(removed, self.RemoveOrders);
                    }
                }
            },
            methods: {
                DeleteMarket: function (id) {
                    this.removedMarketIds.push(id);
                },
                ShowTab: function (category, index) {

                    if (category == 'All') {
                        this.WinnersCount = this.Catalog.winners;
                        MarketTab(category);
                    } else {

                        this.WinnersCount = this.OtherRaceMarkets[index].winners;
                        MarketTab(category + index);
                    }
                },
                handleVisibilityChange: function () {
                    if (document[hidden]) {
                        this.IsPageVisible = false;
                    } else {
                        this.IsPageVisible = true;
                    }
                },
                IsRunnerDisabled: function (status) {
                    if (status === undefined
                        || status === ''
                        || status === null) {
                        return false;
                    }
                    return this.runnerUnavailable.includes(status.toLowerCase());
                },
                FetchCatalog: function (marketId) {
                    let self = this;
                    let qs = svc_prefix + 'markets/catalog2/?id=' + marketId;
                    $.getJSON(qs, function (catalog) {
                        catalog["totalMatched"] = 0;
                        self.Catalog = catalog;

                        self.WinnersCount = catalog.winners;

                        if (self.Catalog.raceName != null) {
                            self.Catalog.eventName = moment(self.Catalog.marketStartTimeUtc).format('h:mm a') + " " + self.Catalog.raceName;
                            document.title = self.Catalog.eventName;
                        }

                        _.each(self.Catalog.runners, function (runner) {
                            runner["ticks"] = 0;
                            runner["selected"] = false;
                        });

                        self.IsLoaded = true;

                        setTimeout(function () { $('[data-toggle="tooltip"]').tooltip(); }, 500);

                        if (!self.signalRFlags.prices) {
                            self.ListMarketData();
                            self.BookIntervalId = setInterval(self.ListMarketData, 1000);
                        }

                        self.OrderIntervalId = setInterval(self.ListOrders, 1500);
                    });
                },
                ListMarketData: function () {
                    if (!this.IsPageVisible) return;

                    if (this.Catalog !== null && this.Catalog.hasOwnProperty("marketId")) {
                        var id = this.Catalog.marketId;
                        var self = this;

                        var token = getCookie('wex3authtoken');
                        var url = pricesUrl + "/Markets/Data?id=" + id + "&token=" + token;

                        $.ajax(url, {
                            timeout: 2000,
                            dataType: 'json',
                            success: function (result, textStatus, jqXhr) {
                                self.RenderMarketData(result);
                            },
                            error: function (jqXhr, textStatus, errorThrown) {
                                if (errorThrown == 'Unauthorized') {
                                    clearInterval(this.BookIntervalId);
                                    location.reload();
                                }
                            }
                        });
                    }
                },
                ClearTimers: function () {
                    clearInterval(this.BookIntervalId);
                    clearInterval(this.OrderIntervalId);
                },
                RenderMarketData: function (MarketData) {
                    if (MarketData === null || MarketData.marketBooks.length === 0) return;

                    var startTime = moment(this.Catalog.marketStartTimeUtc);
                    var currentTime = moment(); // Current time
                    var duration = moment.duration(currentTime.diff(startTime));
                    var totalMinutes = Math.floor(duration.asMinutes());
                    var absoluteMinutes = Math.abs(totalMinutes);
                    var hours = ("0" + Math.floor(absoluteMinutes / 60)).slice(-2);
                    var minutes = ("0" + (absoluteMinutes % 60)).slice(-2);
                    var seconds = Math.abs(Math.floor(duration.asSeconds() % 60)).toString().padStart(2, '0');

                    var formattedTime = 'Elapsed : ';
                    if (totalMinutes < 0) {
                        formattedTime = 'Remaining : ';
                    }

                    formattedTime += (hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0') + ":" + seconds.toString().padStart(2, '0'));

                    this.currentDateTime = formattedTime;
                    this.fromNow = moment(this.Catalog.marketStartTimeUtc).fromNow();

                    const topMarketId = this.Catalog.marketId;

                    let Book = _.find(MarketData.marketBooks, function (book) {
                        return book.id == topMarketId;
                    });

                    const self = this;

                    if (Book !== null && Book !== undefined) {
                        this.Catalog.totalMatched = Book.totalMatched;
                        this.Catalog.status = Book.marketStatus;
                        this.Catalog.betDelay = Book.betDelay;
                        if (!self.signalRFlags.commentry) {
                            this.score = MarketData.scoreboard;
                        }
                        this.scores = MarketData.scores;
                        this.scoreLines = MarketData.fancy;
                        this.Catalog.news = MarketData.news;

                        this.fancySize = localStorage.getItem('fancy');

                        if (this.Catalog.eventTypeId == 4 && this.Catalog.isFancy === false) {
                            this.Catalog.maxBetSize = localStorage.getItem('cricket');
                        }
                        if (this.Catalog.eventTypeId == 4 && this.Catalog.isFancy) {
                            this.Catalog.maxBetSize = localStorage.getItem('fancy');
                        }
                        if (this.Catalog.eventTypeId == 1) {
                            this.Catalog.maxBetSize = localStorage.getItem('soccer');
                        }
                        if (this.Catalog.eventTypeId == 2) {
                            this.Catalog.maxBetSize = localStorage.getItem('tennis');
                        }
                        if (this.Catalog.eventTypeId == 7) {
                            this.Catalog.maxBetSize = localStorage.getItem('race');
                        }
                        if (this.Catalog.eventTypeId == 4339) {
                            this.Catalog.maxBetSize = localStorage.getItem('greyhound');
                        }                        

                        if (Book.marketStatus === "CLOSED") {
                            // this.ClearTimers();
                        }

                        self.UpdateRunnerData(Book, self.Catalog, self.MarketPL);

                        if (this.RunnersAggregate.length > 0) {
                            this.UpdateAggregateOdds(Book);
                        }
                    }

                    if (MarketData.marketBooks.length > 0) {
                        self.ProcessSubMarkets(MarketData.marketBooks);

                    } else {
                        this.subMarkets = [];
                        this.subMarketIds = [];
                    }
                },
                ProcessSubMarkets: function (marketBooks) {
                    const self = this;

                    let ActiveSubMarketIds = _.map(marketBooks, function (book) { return book.id; });
                    ActiveSubMarketIds = _.without(ActiveSubMarketIds, this.Catalog.marketId);

                    ActiveSubMarketIds = _.sortBy(ActiveSubMarketIds, function (id) { return id; });

                    if (ActiveSubMarketIds.length > 0) {
                        _.each(marketBooks, self.RenderSubMarketData);
                    }

                    let catalogsToRemove = _.filter(self.SubMarketIds, function (mid) {
                        return !ActiveSubMarketIds.includes(mid);
                    });

                    self.removedMarketIds = _.union(self.removedMarketIds, catalogsToRemove);

                    self.newMarketIds = _.union(ActiveSubMarketIds, self.newMarketIds);
                },
                ProcessSingleSubMarket: function (book) {
                    this.RenderSubMarketData(book);

                    if (!this.SubMarketIds.includes(book.id)) {
                        this.newMarketIds.push(book.id);
                    }
                },
                RerenderSubMarkets: function () {
                    if (this.isRenderedBusy) {
                        return;
                    }

                    const self = this;

                    if (this.newMarketIds.length === 0) {

                        if (self.removedMarketIds.length > 0) {
                            self.RemoveCatalogues(self.removedMarketIds);
                            self.removedMarketIds = [];
                        }

                        return;
                    }

                    this.isRenderedBusy = true;

                    self.RemoveCatalogues(self.removedMarketIds);

                    this.newMarketIds = _.filter(this.newMarketIds, function (mid) {
                        return !self.removedMarketIds.includes(mid);
                    });

                    self.removedMarketIds = [];

                    let catalogsToFetch = _.filter(this.newMarketIds, function (mid) {
                        return !self.SubMarketIds.includes(mid);
                    });

                    if (catalogsToFetch.length > 0) {
                        this.FetchCatalogs(catalogsToFetch)
                            .done(function () { self.isRenderedBusy = false; })
                            .fail(function () {
                                setTimeout(function () {
                                    self.isRenderedBusy = false;
                                }, 9500);
                            });
                    }
                    else {
                        this.isRenderedBusy = false;
                    }
                },
                UpdateRunnerData: function (Book, Catalog, Pls) {
                    if (Catalog === null || Catalog.runners === null) {
                        return;
                    }

                    var runnersCount = Catalog.runners.length;

                    if (runnersCount === 0) {
                        return;
                    }

                    var self = this;

                    for (let i = 0; i < runnersCount; i++) {

                        var soldier = Book.runners.find(function (item) {
                            return item.id === Catalog.runners[i].selectionId.toString();
                        });

                        

                        if (soldier !== undefined) {
                            if (soldier.status === 'WINNER') {
                                self.MarkWinner(soldier.id);
                            }

                            self.UpdateRunnersPriceSize(Catalog.runners[i], soldier);

                            if (Pls !== undefined && Pls !== null && Pls.length > 0) {
                                var PL = Pls.find(function (plItem) {
                                    return plItem.selectionId === Catalog.runners[i].selectionId
                                        && plItem.marketId === Book.id;
                                });
                                if (PL !== undefined) {
                                    if (PL.ifWin != Catalog.runners[i].ifWin || PL.ifLose != Catalog.runners[i].ifLose) {
                                        var runner = Catalog.runners[i];
                                        runner.ifWin = PL.ifWin;
                                        runner.ifLose = PL.ifLose;
                                        this.$set(Catalog.runners, i, runner);
                                    }
                                } else {
                                    Catalog.runners[i].ifWin = null;
                                    Catalog.runners[i].ifLose = null;
                                }
                            }

                            
                        }
                    }
                },
                UpdateAggregateOdds: function (Book) {
                    var self = this;

                    var backPrices = [];
                    var layPrices = [];
                    _.map(Book.runners, function (rn) {

                        var bookRunners = self.RunnersAggregate.filter(function (rg) {
                            return rg.selectionId.toString() === rn.id;
                        });

                        _.each(bookRunners, function (runner) {
                            backPrices.push(parseFloat(runner.price1) - 1);
                            layPrices.push(parseFloat(runner.lay1) - 1);
                        });
                    });

                    var aggLay = '';
                    if (!layPrices.includes(NaN)) {
                        aggLay = this.AggregateOdds(layPrices);
                    }

                    var aggBack = '';
                    if (!backPrices.includes(NaN)) {
                        aggBack = this.AggregateOdds(backPrices);
                    }

                    if (aggBack !== this.aggregateRun.back) {
                        this.aggregateRun.back = aggBack;
                        $("#agg-back").flash("#8dd2f0", this.plusFlash, 300);
                    }

                    if (aggLay !== this.aggregateRun.lay) {
                        this.aggregateRun.lay = aggLay;
                        $("#agg-lay").flash("#feafb2", this.minusFlash, 300);
                    }

                    if (this.Order.hasOwnProperty("price")
                        && this.IsAggregateOrder) {
                        if (this.Order.side === "B") {
                            this.Order.price = aggBack;
                        } else {
                            this.Order.price = aggLay;
                        }
                        this.CalcPL();
                    }
                },
                AggregateOdds: function (prices) {
                    var val = prices[0];
                    if (prices.length === 1) {
                        val = prices[0];

                    } else {

                        for (i = 1; i < prices.length; i++) {
                            if (prices[i] === '' || prices[i] < 0) continue;

                            val = (val * prices[i] - 1) / (val + prices[i] + 2);
                        }
                    }

                    if (val <= 0) {
                        return 0;
                    }
                    else {
                        return Math.round(val * 100) / 100;
                    }
                },
                UpdateRunnersPriceSize: function (runner, soldier) {
                    let liqRate = LiquidityRate;
                    if (!runner.marketId.startsWith("1.")) {
                        liqRate = 1;
                    }

                    if (soldier.hasOwnProperty("size1")) {
                        soldier.size1 *= liqRate;
                    }
                    if (soldier.hasOwnProperty("ls1")) {
                        soldier.ls1 *= liqRate;
                    }

                    runner.price1 = this.IndicatePriceChange(runner, runner.price1, soldier.price1, "indB1", "#8dd2f0");
                    runner.size1 = this.IndicateSizeChange(runner, runner.size1, soldier.size1, "indB1", "#8dd2f0");
                    runner.lay1 = this.IndicatePriceChange(runner, runner.lay1, soldier.lay1, "indL1", "#feafb2");
                    runner.ls1 = this.IndicateSizeChange(runner, runner.ls1, soldier.ls1, "indL1", "#feafb2");

                    if (soldier.hasOwnProperty("size2")) {
                        runner.size2 = soldier.size2 * liqRate;
                    } else {
                        runner.size2 = null;
                    }
                    if (soldier.hasOwnProperty("size3")) {
                        runner.size3 = soldier.size3 * liqRate;
                    } else {
                        runner.size3 = null;
                    }

                    runner.price2 = soldier.price2;
                    runner.price3 = soldier.price3;
                    runner.lay2 = soldier.lay2;
                    runner.lay3 = soldier.lay3;

                    if (soldier.hasOwnProperty("ls2")) {
                        runner.ls2 = soldier.ls2 * liqRate;
                    } else {
                        runner.ls2 = null;
                    }
                    if (soldier.hasOwnProperty("ls3")) {
                        runner.ls3 = soldier.ls3 * liqRate;
                    } else {
                        runner.ls3 = null;
                    }

                    runner.status = soldier.status;

                    return runner;
                },
                IndicatePriceChange: function (runner, oldVal, newVal, attribute, bgcolor) {
                    ++runner.ticks;

                    if (oldVal === newVal) {
                        if (runner.ticks >= 7) {
                            runner.ticks = 0;
                            runner[attribute] = "";
                        }
                        return newVal;
                    }

                    runner.ticks = 0;

                    if (oldVal > newVal) {
                        runner[attribute] = "d";
                        runner.IsDown = true;
                    }
                    if (newVal > oldVal) {
                        runner[attribute] = "u";
                        runner.IsUp = true;
                    }

                    bg = this.plusFlash;

                    var oddType = attribute.replace('ind', '');
                    var el = "#" + oddType + "-" + runner.selectionId;

                    bg = oddType.includes("B") ? this.plusFlash : this.minusFlash;

                    $(el).flash(bgcolor, bg, 300);
                    return newVal;
                },
                IndicateSizeChange: function (runner, oldVal, newVal, attribute, bgcolor) {
                    if (oldVal === newVal) {
                        return newVal;
                    }

                    bg = this.plusFlash;

                    var oddType = attribute.replace('ind', '');
                    var el = "#" + oddType + "-" + runner.selectionId;

                    bg = oddType.includes("B") ? this.plusFlash : this.minusFlash;
                    $(el).flash(bgcolor, bg, 300);
                    return newVal;
                },
                MarkWinner: function (winnerId) {
                    //                 $("#runner-" + winnerId).addClass('winner');
                },
                UpdatePriceCell: function (oldVal, newVal, index, selectionId, bgcolor) {
                    if (oldVal === newVal) return newVal;
                    bg = oldVal > newVal ? this.plusFlash : this.minusFlash;
                    var el = "#" + index + "-" + selectionId;
                    if ($.flash !== undefined) {
                        $(el).flash(bgcolor, bg, 300);
                    }
                    return newVal;
                },
                RenderSignalRPrices: function (book) {
                    const self = this;

                    if (book.id == this.activeMarketId) {

                        if (book !== null && book !== undefined) {
                            this.Catalog.totalMatched = book.totalMatched;
                            this.Catalog.status = book.marketStatus;
                            this.Catalog.betDelay = book.betDelay;
                            this.score = book.scoreboard;
                            this.scores = book.scores;

                            this.scoreLines = book.fancy;
                            this.Catalog.news = book.news;

                            this.fancySize = localStorage.getItem('fancy');

                            if (this.Catalog.eventTypeId == 4 && this.Catalog.isFancy === false) {
                                this.Catalog.maxBetSize = localStorage.getItem('cricket');
                            }
                            if (this.Catalog.eventTypeId == 4 && this.Catalog.isFancy) {
                                this.Catalog.maxBetSize = localStorage.getItem('fancy');
                            }
                            if (this.Catalog.eventTypeId == 1) {
                                this.Catalog.maxBetSize = localStorage.getItem('soccer');
                            }
                            if (this.Catalog.eventTypeId == 2) {
                                this.Catalog.maxBetSize = localStorage.getItem('tennis');
                            }
                            if (this.Catalog.eventTypeId == 7) {
                                this.Catalog.maxBetSize = localStorage.getItem('race');
                            }
                            if (this.Catalog.eventTypeId == 4339) {
                                this.Catalog.maxBetSize = localStorage.getItem('greyhound');
                            }      

                            if (book.marketStatus === "CLOSED") {
                                // this.ClearTimers();
                            }

                            this.fromNow = moment(self.Catalog.marketStartTimeUtc).fromNow();
                            this.UpdateRunnerData(book, self.Catalog, self.MarketPL);

                            if (this.RunnersAggregate.length > 0) {
                                this.UpdateAggregateOdds(book);
                            }
                        }
                    }
                    else if (book.eventId == self.activeEventId) {

                        self.ProcessSingleSubMarket(book);
                    }
                },
                FetchCatalogsSignalR: function (marketIds, Data) {
                    var params = marketIds.join(',');
                    var qs = svc_prefix + 'markets/catalogs/?ids=' + params;
                    var self = this;
                    $.getJSON(qs, function (Catalogs) {
                        self.RenderSubMarketsSignalR(Catalogs, Data);
                    }).always(function () {
                        self.isRenderedBusy = false;
                    });
                },
                RenderSubMarketsSignalR: function (Catalogs , Data) {
                    var self = this;
                    if (Catalogs != "undefined" && Catalogs !== null && Catalogs.length > 0) {
                        _.each(Catalogs, function (catalog) {
                            catalog['status2'] = null;
                            self.subMarkets.push(catalog);
                        });
                        self.SortSubMarkets();
                        self.RenderSubMarketData(Data);
                    }
                    this.isRenderedBusy = false;
                },
                FetchCatalogs: function (marketIds) {

                    const qs = svc_prefix + 'markets/catalogs/?ids=' + marketIds.join(',');

                    return $.getJSON(qs, this.RenderSubMarkets);
                },
                RenderSubMarkets: function (Catalogs) {
                    const self = this;

                    if (Catalogs != "undefined" && Catalogs !== null && Catalogs.length > 0) {
                        _.each(Catalogs, function (catalog) {
                            catalog['status2'] = null;
                            self.subMarkets.push(catalog);
                        });
                        self.SortSubMarkets();
                    }

                    this.isRenderedBusy = false;
                },
                SortSubMarkets: function () {
                    var highPriority = _.filter(this.subMarkets, function (sm) {
                        return sm.sortPriority == 1;
                    });
                    var lowPriority = _.filter(this.subMarkets, function (sm) {
                        return sm.sortPriority != 1;
                    });

                    highPriority = _.sortBy(highPriority, 'marketName');
                    lowPriority = _.sortBy(lowPriority, 'marketName');

                    this.subMarkets = _.union(highPriority, lowPriority);
                },
                RemoveCatalogues: function (RemovedMarketIds) {
                    // if (RemovedMarketIds.length === 0) return;
                    var self = this;
                    _.each(RemovedMarketIds, function (mid) {
                        self.subMarkets = _.filter(self.subMarkets, function (catalog) {
                            return mid !== catalog.marketId;
                        });
                    });
                },
                RenderSubMarketData: function (Book) {
                    var self = this;
                    if (this.LoadingSubMarkets) return;

                    let market = _.find(this.subMarkets, function (catalog) {
                        return catalog.marketId === Book.id;
                    });
                    if (market === undefined) return;

                    market.status2 = Book.status2;
                    market.status = Book.marketStatus;

                    this.UpdateRunnerData(Book, market, self.MarketPL);
                },
                ShowBetSlip: function (runner, side, runnerMarketId, ControlIndex) {
                    this.Order.render = false;
                    this.Order.size = '';
                    this.IsAggregateOrder = false;
                    this.Order.error = "";

                    if (this.Order.size === 0) {
                        this.Order.size = this.GetDefaultStake();
                    }

                    this.Order.isLine = this.IsLineMarket(runnerMarketId);
                    this.Order.isFixOdds = !this.IsUnmatchBetAllowed(runnerMarketId);

                    var price = 0;
                    var fancyPrice = null;
                    switch (ControlIndex) {
                        case 1:
                            if (side.toLowerCase() === "b") {
                                price = runner.price1;
                                fancyPrice = runner.size1;
                            } else {
                                price = runner.lay1;
                                fancyPrice = runner.ls1;
                            }
                            break;

                        case 2:
                            if (side.toLowerCase() === "b") {
                                price = runner.price2;
                                fancyPrice = runner.size2;
                            } else {
                                price = runner.lay2;
                                fancyPrice = runner.ls2;
                            }
                            break;

                        case 3:
                            if (side.toLowerCase() === "b") {
                                price = runner.price3;
                                fancyPrice = runner.size3;
                            } else {
                                price = runner.lay3;
                                fancyPrice = runner.ls3;
                            }
                            break;
                    }

                    if (price === undefined || price === null) return;

                    price = parseFloat(price);
                    fancyPrice = parseFloat(fancyPrice);

                    this.OrderPrice = price;
                    this.Order["price"] = price;
                    this.Order["fancyPrice"] = fancyPrice;
                    this.Order["runnerName"] = runner.runnerName;
                    this.Order.selectionId = runner.selectionId;
                    this.Order["marketId"] = runnerMarketId;
                    this.Order["side"] = side.toUpperCase();
                    this.Order["persist"] = true;
                    this.Order["identity"] = GetDeviceIdentity();


                    this.CalcPL();

                    if (side === "L") {
                        $("#Place-Order,#PrInc,#PrDec").removeClass('btn-info');
                        $("#Place-Order,#PrInc,#PrDec").addClass('btn-danger');
                        $("#bet-slip-head").removeClass('bg-primary');
                        $("#bet-slip-head").addClass('bg-danger');
                    } else {
                        $("#Place-Order,#PrInc,#PrDec").addClass('btn-info');
                        $("#Place-Order,#PrInc,#PrDec").removeClass('btn-danger');
                        $("#bet-slip-head").removeClass('bg-danger');
                        $("#bet-slip-head").addClass('bg-primary');
                    }

                    if (IsMobile()) {
                        this.ShowBetSlipMobile();
                    } else {
                        this.Order.render = true;

                        setTimeout(function () {
                            $("#bet-size").focus();
                        }, 150);
                    }
                },
                ShowBetSlipMobile: function () {
                    $('#betSlipMobile').on('shown.bs.modal', function (e) {
                        $('#bet-size-m').trigger('focus');
                    });
                    $("#betSlipMobile").modal('show');
                },
                HideBetSlip: function () {
                    $("#betSlipMobile").modal('hide');
                },
                IsLineMarket: function (marketId) {
                    isLine = false;

                    if (this.Catalog.marketId === marketId) {
                        isLine = this.Catalog.bettingType === "LINE";
                    } else {
                        var market = _.find(this.subMarkets, function (catalogue) {
                            return catalogue.marketId === marketId;
                        });
                        if (market === undefined) {
                            isLine = false;
                        } else {
                            isLine = market.bettingType === "LINE";
                        }
                    }
                    return isLine;
                },
                IsBookmakerMarket: function (marketId) {
                    var market = _.find(this.subMarkets, function (catalogue) {
                        return catalogue.marketId === marketId;
                    });
                    if (market === undefined) {
                        return false;
                    } else if (market.marketName == this.bookmakerMarketName) {
                        return true;
                    }
                    return false;
                },
                IsUnmatchBetAllowed: function (marketId) {

                    var isUnmatch = false;

                    if (this.Catalog.marketId === marketId) {
                        isUnmatch = this.Catalog.unmatchBet;
                    } else {
                        var market = _.find(this.subMarkets, function (catalogue) {
                            return catalogue.marketId === marketId;
                        });
                        if (market !== undefined) {
                            isUnmatch = market.unmatchBet;
                        }
                    }
                    return isUnmatch;
                },
                GetDefaultStake: function () {
                    var btnStake = $('.btn-stake')[0];
                    if (btnStake) {
                        return $(btnStake).data('amount');
                    }
                    return 1000;
                },
                CloseBetSlip: function () {
                    this.Order.render = false;
                },
                ClearBetSlip: function () {
                    this.Order.size = '';
                    document.getElementById("bet-size").focus();
                },
                CalcPL: function () {
                    price = parseFloat(this.Order.price);
                    size = parseFloat(this.Order.size);

                    if (this.IsLineMarket(this.Order.marketId)) {
                        profit = size;
                        liable = size;
                    } else {
                        var orderPrice = this.IsAggregateOrder ? price : price - 1;

                        if (this.Order.side === "B") {
                            profit = orderPrice * size;
                            liable = size;
                        } else {
                            profit = size;
                            liable = orderPrice * size;
                        }
                    }

                    this.Order["profit"] = numeral(profit).format('0,0[.]00');
                    this.Order["liable"] = numeral(liable).format('0,0[.]00');
                },
                SetOrderSize: function (newSize) {
                    this.Order.size = newSize;
                    this.CalcPL();
                },
                IncreaseOrderSize: function (increment) {
                    document.getElementsByClassName('points').disabled = true;
                    if (this.Order.size === '') this.Order.size = 0;
                    this.Order.size += increment;
                    this.CalcPL();
                    document.getElementsByClassName('points').disabled = false;
                },
                PlaceOrder: function () {
                    if (this.Order.working) {
                        return;
                    }
                    this.Order["working"] = true;

                    this.Order.error = "";

                    let Orders = [];
                    if (this.Order.selectionId === 0) {
                        Orders = this.AggregateOrdersList();
                    } else {
                        let val = parseFloat(this.Order.price);
                        if (!this.Order.isFixOdds) {
                            this.UpdatePrice(val);
                        }

                        this.Order.size = parseFloat(this.Order.size);

                        if (isNaN(this.Order.size)) {
                            this.Order.size = "";
                            this.Order["working"] = false;
                            $("#bet-size").focus();
                            return;
                        }

                        Orders.push(this.Order);
                    }

                    const self = this;

                    const token = getCookie('wex3authtoken');
                    const url = ordersUrl + '/orders?token=' + token;

                    $.ajax({
                        url: url,
                        type: 'POST',
                        timeout: 60000,
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(Orders),
                        dataType: 'json',
                        success: function (result, textStatus, jqXhr) {
                            if (jqXhr.status == 202) {
                                self.TrackOrder(result[0].requestId);
                            }
                            else {
                                self.ResetBetSlip();
                            }

                            if (result !== undefined && result.length > 0) {
                                result.forEach(function (order) {
                                    self.RenderOrder(self.OrderToOverVM(order));
                                });
                            }
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            
                            self.Order["working"] = false;

                            if (jqXhr.status == 401) {
                                self.Order["error"] = "Invalid session";
                            }
                            else {
                                let errorText = jqXhr.responseJSON.hasOwnProperty('error') ?
                                    jqXhr.responseJSON.error : textStatus + ': ' + errorThrown;
                                self.Order["error"] = errorText;
                            }
                        }
                    });
                },
                TrackOrder: function (requestId) {
                    const self = this;
                    const token = getCookie('wex3authtoken');
                    const url = ordersUrl + '/orders/request/' + requestId + '?token=' + token;

                    let attemptCount = 0;
                    const maxAttempts = 15; // Set the maximum number of attempts
                    let checkInterval;

                    // Define a function to make the AJAX request
                    function makeRequest() {
                        $.ajax({
                            url: url,
                            type: 'GET',
                            timeout: 2000,
                            dataType: 'json',
                            success: function (result, textStatus, jqXhr) {
                                // Check if the order is processed
                                if (result.status !== 0) {
                                    if (checkInterval) {
                                        clearInterval(checkInterval);
                                    }
                                    self.ResetBetSlip();
                                }
                                else {
                                    pollStatus();
                                }
                            },
                            error: function (jqXhr, textStatus, errorThrown) {
                                if (checkInterval) {
                                    clearInterval(checkInterval);
                                }

                                self.ResetBetSlip();
                            }
                        });
                    }

                    function pollStatus() {
                        // If this was the first request and order is not processed, start the interval
                        if (!checkInterval) {
                            checkInterval = setInterval(function () {
                                attemptCount++; // Increment the attempt counter

                                // Check if the maximum number of attempts has been reached
                                if (attemptCount >= maxAttempts) {
                                    clearInterval(checkInterval);
                                    self.ResetBetSlip();
                                    // Additional logic for max attempts reached
                                    return; // Exit the function
                                }

                                makeRequest();
                            }, 1000);
                        }
                    }

                    // Call the function immediately for the first request
                    makeRequest();
                },
                ResetBetSlip: function () {
                    const self = this;
                    self.Order["working"] = false;
                    self.Order["render"] = false;
                    self.HideBetSlip();
                    self.Order["error"] = "";
                    $("#place-error").hide();
                    self.Order["size"] = self.GetDefaultStake();
                },
                OrderToOverVM: function (order) {
                    return {
                        id: order.orderId,
                        rn: order.runner,
                        mid: order.marketId,
                        bs: order.side,
                        mp: order.matchedPrice,
                        ms: order.matchedSize,
                        up: order.requestedPrice,
                        us: order.requestedSize,
                    };
                },
                GetHash: function (list) {
                    return _.reduce(_.sortBy(list), function (memo, item) { return memo + "" + item });
                },
                ListOrders: function () {
                    const self = this;

                    if (!this.IsPageVisible) return;

                    if (self.signalRFlags.orders && this.isSignalRConnected) return;

                    if (this.Catalog === null || this.Catalog.eventId === null) return;

                    const params = new URLSearchParams({
                        eventId: this.Catalog.eventId,
                        marketId: this.Catalog.marketId,
                        maxResults: 0,
                        token: getCookie('wex3authtoken')
                    });

                    const url = ordersUrl + '/orders/event?' + params.toString();

                    $.ajax(url, {
                        timeout: 5000,
                        dataType: 'json',
                        success: function (result, textStatus, jqXhr) {
                            self.RenderOrdersPosition(result);
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                        }
                    });
                },
                RenderOrdersPosition: function (result) {
                    this.SyncOrders(this, result['vOrders']);
                    this.MarketPL = result['pls'];
                },
                SyncOrders: function (self, orders) {
                    orders.reverse().forEach(function (order) {
                        self.RenderOrder(order);
                    });
                },
                Cancel: function (Order) {
                    let self = this;

                    clientEx.DeleteOrder(Order.id)
                        .then((data) => {
                            self.RenderOrder(data);

                            if (!self.isUserHubConnected) {
                                GetFunds();
                            }
                        })
                        .catch((error) => {
                        });
                },
                CancelAll: function () {

                    if (this.Catalog === null || this.Catalog.marketId === null) return;

                    let self = this;

                    clientEx.DeleteOrders(this.Catalog.marketId)
                        .then((data) => {
                            if (!self.isUserHubConnected) {
                                GetFunds();
                            }
                        })
                        .catch((error) => {
                        });
                },
                ShowFancyPosition: function (marketId) {
                    this.FetchLinePosition(marketId);
                    var subMarket = _.find(this.subMarkets, function (item) {
                        return item.marketId === marketId;
                    });
                    if (subMarket !== undefined) {
                        this.SelectMarketName = subMarket.marketName;
                    }
                },
                FetchLinePosition: function (marketId) {
                    var self = this;
                    $.get(svc_prefix + 'orders/LinePosition/?marketId=' + marketId, function (result) {
                        self.SelectFancyPos = result;
                        $("#fancyPosition").modal('show');
                    });
                },
                PriceUp: function () {
                    if (this.IsFixedOdds) return;
                    var oldPrice = parseFloat(this.Order.price);
                    var NewPrice = this.OneStepIncrement(oldPrice);
                    this.UpdatePrice(NewPrice);
                },
                PriceDown: function () {
                    if (this.IsFixedOdds) return;
                    var oldPrice = parseFloat(this.Order.price);
                    var NewPrice = this.OneStepDecrement(oldPrice);
                    this.UpdatePrice(NewPrice);
                },
                OneStepIncrement: function (NewPrice) {
                    if (NewPrice === '' || NewPrice === undefined) {
                        return undefined;
                    }
                    else if (this.Order.isFixOdds) {
                        NewPrice = Math.round(NewPrice);
                    }
                    else if (this.Order.isLine) {
                        NewPrice = Math.round(NewPrice) + 1;
                    }
                    else {
                        validInc = PriceValidator.GetValidIncrement(NewPrice);
                        NewPrice = NewPrice + validInc;
                    }
                    return NewPrice;
                },
                OneStepDecrement: function (NewPrice) {
                    if (NewPrice === '' || NewPrice === undefined) {
                        return undefined;
                    }
                    else if (this.Order.isFixOdds) {
                        NewPrice = Math.round(NewPrice);
                    }
                    else if (this.Order.isLine) {
                        NewPrice = Math.round(NewPrice) - 1;
                    }
                    else {
                        validDec = PriceValidator.GetValidDecrement(NewPrice);
                        NewPrice = NewPrice - validDec;
                    }
                    return NewPrice;
                },
                UpdatePrice: function (Price) {
                    if (this.IsLocalOdds) {
                        Price = Price;
                    }
                    else if (this.Order.isLine || Price >= 20) {
                        Price = Math.round(Price);
                    } else {
                        Price = parseFloat(PriceValidator.ValidatePrice(Price));
                        Price = Price.toFixed(2);
                    }

                    this.OrderPrice = Price;
                    this.Order.price = parseFloat(Price);

                    this.OldPrice = Price;
                    this.CalcPL();
                },
                PlayCommentry: function (commentryText) {
                    if (this.IsVoice) {
                        CommentryPlayer.Play(commentryText);
                    }
                },
                ShowRules: function (marketId, marketName) {
                    var market2;
                    if (marketName === 'BetFair Fancy') {
                        if (this.subMarkets.length > 0) {
                            market2 = _.find(this.subMarkets, function (catalogue) {
                                return catalogue.isFancy && catalogue.origin === 'BETFAIR';

                            });
                        }
                        marketId = market2.marketId;
                    }
                    if (marketName === 'Fancy 2') {
                        if (this.subMarkets.length > 0) {
                            market2 = _.find(this.subMarkets, function (catalogue) {
                                return catalogue.isFancy && catalogue.origin != 'BETFAIR';

                            });
                        }
                        marketId = market2.marketId;
                    }

                    var rules = '';
                    if (this.Catalog.marketId === marketId) {
                        rules = this.Catalog.rules;
                    } else {
                        var market = _.find(this.subMarkets, function (catalogue) {
                            return catalogue.marketId === marketId;
                        });
                        if (market !== undefined) {
                            rules = market.rules;
                        }
                    }
                    $("#rules-box").html(rules);
                    if (rules != '') {
                        $("#modalRules").modal('show');
                    }

                },
                toggleRunner: function (runner) {
                    // Max selectable runners are 7
                    if (this.RunnersAggregate.length >= 7
                        && !runner.selected) {
                        return;
                    }

                    runner.selected = !runner.selected;

                    this.Catalog.runners.push([]);
                    this.Catalog.runners.pop();

                    aggRunnerName = [];
                    _.each(this.RunnersAggregate, function (item) {
                        var runnerNameArr = item.runnerName.split('.');
                        if (runnerNameArr.length > 1) {
                            aggRunnerName.push(runnerNameArr[0]);
                        }
                    });
                    this.aggregateRun.runnerName = aggRunnerName.join(' + ');
                },
                ShowBetSlipForAggregate: function (side) {

                    if (side.toLowerCase() === "b" && this.aggregateRun.back === '') {
                        return;
                    }

                    if (side.toLowerCase() === "l" && this.aggregateRun.lay === '') {
                        return;
                    }

                    this.aggregateRun.price1 = this.aggregateRun.back;
                    this.aggregateRun.lay1 = this.aggregateRun.lay;

                    this.ShowBetSlip(this.aggregateRun, side, this.aggregateRun.marketId, 1);
                    this.IsAggregateOrder = true;
                },
                AggregateOrdersList: function () {
                    TotalPercentage = 0;
                    iTemPercentage = 0;

                    side = this.Order.side;

                    var self = this;

                    TotalPercentage = _.reduce(this.RunnersAggregate, function (TotalPercentage, runner) {
                        var price = side.toLowerCase() === 'b' ? runner.price1 : runner.lay1;
                        return TotalPercentage + (100 / price);
                    }, TotalPercentage);

                    var Orders = _.map(this.RunnersAggregate, function (runner) {
                        var price = side.toLowerCase() === 'b' ? runner.price1 : runner.lay1;

                        iTemPercentage = 100 / price;

                        var order = {
                            price: price,
                            runnerName: runner.runnerName,
                            selectionId: runner.selectionId,
                            marketId: self.Order.marketId,
                            side: side.toUpperCase(),
                            persist: true,
                            size: Math.round(iTemPercentage / TotalPercentage * self.Order.size)
                        };

                        order["identity"] = GetDeviceIdentity();
                        return order;
                    });
                    return Orders;
                },
                MetadataHtml: function (runner) {
                    return "Jockey: <b>" + runner.jockeyName + "</b>" +
                        "<br>Trainer: <b>" + runner.trainerName + "</b>" +
                        "<br>Age / Weigth: <b>" + runner.age + "/" + runner.weight + "</b>" +
                        "<br>Days since last run: <b>" + runner.lastRun + "</b>" +
                        "<br>Wearing: <b>" + runner.wearing + "</b>";
                },
                MetadataHtml2: function (runner) {
                    return "<table class='table table-sm'>" +
                        "<tr><td>Jockey</td><th>" + runner.jockeyName + "</th></tr>" +
                        "<tr><td>Trainer</td><th>" + runner.trainerName + "</th></tr>" +
                        "<tr><td>Age / Weigth</td><th>" + runner.age + "/" + runner.weight + "</th></tr>" +
                        "</table>";
                },
                RenderOrder: function (order) {
                    let self = this;

                    if (!this.ShouldRender(order)) {
                        return;
                    }

                    let UnmatchedIndex = _.findIndex(self.UnMatched, function (Order) {
                        return Order.id === order.id;
                    });
                    if (UnmatchedIndex >= 0) {
                        self.UnMatched.splice(UnmatchedIndex, 1);
                    }

                    let matchedIndex = _.findIndex(self.Matched, function (Order) {
                        return Order.id === order.id;
                    });

                    if (matchedIndex >= 0) {
                        self.Matched.splice(matchedIndex, 1);
                    }

                    if (order.ms > 0) {
                        self.Matched.unshift(order);
                    }

                    if (order.us > 0) {
                        self.UnMatched.unshift(order);
                    }
                },
                ShouldRender: function (order) {
                    if (order == null || order == undefined || order.id == null || order.id == undefined) {
                        return false;
                    }

                    if (order.hasOwnProperty('eid') && order.eid == this.Catalog.eventId) {
                        return true;
                    }

                    return order.mid === marketId || self.SubMarketIds.includes(order.mid);
                },
                RemoveOrders: function (marketId) {
                    self.Matched = [];
                    self.Matched = _.filter(self.Matched, function (order) {
                        return order.mid != marketId;
                    });
                },
                RenderCommentry: function (cmt) {
                    if (cmt.marketId === marketId) {
                        this.score = cmt;
                    }
                },
                ClearCommentry: function (cmt) {
                    if (cmt.marketId === marketId) {
                        this.score = null;
                    }
                },
                RenderAllPositions: function (InComeingData) {
                    let self = this;
                    InComeingData.profitlosses.forEach(function (profitloss) {
                        if (!self.SubMarketIds.includes(profitloss.marketId)) {
                            return;
                        }
                    })

                    InComeingData.profitlosses.forEach(function (profitloss) {
                        let AllreadyFound = _.find(self.MarketPL, function (available) {
                            return profitloss.selectionId == available.selectionId && profitloss.marketId == available.marketId;
                        });
                        if (AllreadyFound !== null && AllreadyFound !== undefined) {
                            AllreadyFound.ifLose = profitloss.ifLose;
                            AllreadyFound.ifWin = profitloss.ifWin;
                        } else {
                            let toinsert = { marketId: profitloss.marketId, selectionId: profitloss.selectionId, ifWin: profitloss.ifWin, ifLose: profitloss.ifLose };
                            self.MarketPL.push(toinsert);
                        }
                    });
                }
            }
        });
    }

    // A simple background color flash effect that uses jQuery Color plugin
    jQuery.fn.flash = function (bgcolor, color, duration) {
        let current = this.css('backgroundColor');
        this.css('backgroundColor', 'rgb(' + color + ')')
            .animate({ backgroundColor: 'rgb(' + bgcolor + ')' }, duration);
    };

    $(window).on('unload', function () {
        if (MarketVM !== undefined) {
            MarketVM.ClearTimers();
        }
    });

    $("#IsDisplayOn").click(function () {
        var x = document.getElementById("IsDisplayOn").checked;
        if (x != true) {
            noSleep.disable();
        }
        if (x != false) {
            noSleep.enable();
        }
    });
}


const accessTokenProvider = () => {
    return token;
}

function ErrorHandler(exception) {
    if (exception === undefined) return;
    var errors = ["MISSING_AUTH_TOKEN", "INVALID_SESSION"];
    if (errors.includes(exception.error)) {
        document.location.href = "/Users/Login";
    }
}

function incrementValue(e) {
    e.preventDefault();
    var fieldName = $(e.target).data('field');
    var parent = $(e.target).closest('div');
    var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

    if (!isNaN(currentVal)) {
        parent.find('input[name=' + fieldName + ']').val(currentVal + 1);
    } else {
        parent.find('input[name=' + fieldName + ']').val(0);
    }
}

function decrementValue(e) {
    e.preventDefault();
    var fieldName = $(e.target).data('field');
    var parent = $(e.target).closest('div');
    var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

    if (!isNaN(currentVal) && currentVal > 0) {
        parent.find('input[name=' + fieldName + ']').val(currentVal - 1);
    } else {
        parent.find('input[name=' + fieldName + ']').val(0);
    }
}

$('.input-group').on('click', '.button-plus', function (e) {
    incrementValue(e);
});

$('.input-group').on('click', '.button-minus', function (e) {
    decrementValue(e);
});

